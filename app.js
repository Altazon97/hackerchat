// Generated by CoffeeScript 1.6.3
(function() {
  var COLOR_ID, PORT, TITLE, app, colors, ensureSession, express, getSaneColor, http, io, models, mongoose, path, secrets, server, sio, zc;

  express = require('express');

  sio = require('socket.io');

  http = require('http');

  path = require('path');

  zc = require('zeroclipboard');

  mongoose = require('mongoose');

  colors = require('colors');

  secrets = require('./secrets');

  models = require('./models');

  TITLE = "HackerChat";

  PORT = process.env.PORT || 3000;

  app = express();

  server = http.createServer(app);

  io = sio.listen(server);

  app.set('views', path.join(__dirname, 'views'));

  app.set('view engine', 'jade');

  app.use(express.favicon());

  app.use(express.logger('dev'));

  app.use(express.json());

  app.use(express.urlencoded());

  app.use(express.bodyParser());

  app.use(express.cookieParser());

  app.use(express.cookieSession({
    secret: secrets.COOKIE_SECRET || "supersecret"
  }));

  app.use(express.methodOverride());

  app.use(app.router);

  app.use(express.errorHandler());

  app.use(require('less-middleware')({
    src: __dirname + '/static',
    force: true,
    sourceMap: true
  }));

  app.use(express["static"](path.join(__dirname, 'static')));

  mongoose.connect(secrets.MONGO_URI, function() {
    console.log("Database connection established".yellow);
    return server.listen(PORT);
  });

  COLOR_ID = 0;

  getSaneColor = function() {
    var sane_colors, to_return;
    sane_colors = ["#BE3625", "#0367E9", "#2D8306", "#A104D2"];
    to_return = sane_colors[COLOR_ID];
    COLOR_ID += 1;
    if (COLOR_ID === sane_colors.length) {
      COLOR_ID = 0;
    }
    return to_return;
  };

  ensureSession = function(req, res, next) {
    if (!req.session.user_id) {
      return res.redirect("/?whence=" + req.url);
    } else {
      return next();
    }
  };

  app.get('/', function(req, res) {
    if (req.session.user_id) {
      return res.redirect("/chats");
    } else {
      return res.render('index', {
        title: TITLE
      });
    }
  });

  app.post('/', function(req, res) {
    var doRedirect, name, user, whence;
    name = req.body.name;
    whence = req.query.whence;
    doRedirect = function() {
      if (whence) {
        return res.redirect(whence);
      } else {
        return res.redirect("/chats");
      }
    };
    if (name) {
      console.log("Got POST with name " + name);
      return user = models.User.findOne({
        name: name
      }, function(err, user) {
        if (err) {
          res.send(500, err);
        }
        if (user !== null) {
          console.log("User NOT null!");
          req.session.user_id = user._id;
          return doRedirect();
        } else {
          console.log("User IS null!");
          user = new models.User();
          user.name = req.body.name;
          user.color = getSaneColor();
          console.log(user);
          return user.save(function(err) {
            if (err) {
              res.send(500, err);
            }
            req.session.user_id = user._id;
            return doRedirect();
          });
        }
      });
    } else {
      return res.send("You EEEEDIOT!!! YOU FORGOT THE `name` PARAM!!!");
    }
  });

  app.get('/chats', ensureSession, function(req, res) {
    var user;
    return user = models.User.findOne({
      _id: req.session.user_id
    }).populate('chats').exec(function(err, user) {
      if (err) {
        return res.send(500, err);
      } else if (user === null) {
        req.session.user_id = void 0;
        return res.redirect("/");
      } else {
        return res.render('chats', {
          title: TITLE,
          user: user
        });
      }
    });
  });

  app.get('/new-chat', ensureSession, function(req, res) {
    var user;
    return user = models.User.findOne({
      _id: req.session.user_id
    }, function(err, user) {
      var chat;
      if (err) {
        return res.send(500, err);
      } else if (user === null) {
        req.session.user_id = void 0;
        return res.redirect("/");
      } else {
        chat = new models.Chat();
        chat.user = user;
        return chat.save(function(err) {
          if (err) {
            return res.send(500, err);
          } else {
            user.chats.push(chat);
            return user.save(function(err) {
              if (err) {
                return res.send(500, err);
              } else {
                return res.redirect("/chats/" + chat._id);
              }
            });
          }
        });
      }
    });
  });

  app.get('/chats/:chat_id', ensureSession, function(req, res) {
    var user;
    return user = models.User.findOne({
      _id: req.session.user_id
    }, function(err, user) {
      var chat;
      if (err) {
        return res.send(500, err);
      } else {
        return chat = models.Chat.findOne({
          _id: req.params.chat_id
        }, function(err, chat) {
          if (err) {
            return res.send(500, err);
          } else {
            return res.render('chat', {
              title: TITLE,
              user: JSON.stringify(user),
              user_dict: user,
              chat: JSON.stringify(chat)
            });
          }
        });
      }
    });
  });

  app.get('/logout', function(req, res) {
    req.session = null;
    return res.redirect('/');
  });

  io.sockets.on('connection', function(socket) {
    var room;
    room = null;
    socket.on('subscribe', function(chat_id) {
      console.log("JOINING " + chat_id);
      socket.join(chat_id);
      return room = chat_id;
    });
    socket.on('propogate_hack', function(hack_body) {
      return io.sockets["in"](room).emit('new_hack', hack_body);
    });
    socket.on('update_title', function(title) {
      socket.broadcast.to(room).emit('title_update', title);
      return models.Chat.update({
        _id: room
      }, {
        title: title
      }, function(err) {
        if (err) {
          return console.error("ERROR SAVING TITLE FOR CHAT " + room + ": " + err);
        }
      });
    });
    return socket.on('msg_send', function(user, msg, color) {
      var date, msg_obj;
      date = new Date().toISOString();
      io.sockets["in"](room).emit('new_msg', {
        user: user,
        msg: msg,
        date: date,
        color: color
      });
      msg_obj = {
        username: user,
        body: msg,
        date: date,
        color: color
      };
      return models.Chat.update({
        _id: room
      }, {
        $push: {
          messages: msg_obj
        }
      }, function(err) {
        if (err) {
          return console.error("ERROR SAVING MESSAGE TO CHAT " + room + ": " + err);
        } else {
          return console.error("success");
        }
      });
    });
  });

}).call(this);
